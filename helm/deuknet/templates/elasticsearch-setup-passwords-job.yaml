{{- if .Values.elasticsearch.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.elasticsearch.name }}-setup-passwords
  namespace: {{ .Values.global.namespace }}
  labels:
    app: {{ .Values.elasticsearch.name }}-setup-passwords
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        app: {{ .Values.elasticsearch.name }}-setup-passwords
    spec:
      restartPolicy: OnFailure
      initContainers:
        # Elasticsearch가 준비될 때까지 대기
        - name: wait-for-elasticsearch
          image: curlimages/curl:latest
          env:
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: elastic-password
          command:
            - sh
            - -c
            - |
              echo "Waiting for Elasticsearch to be ready..."
              {{- if .Values.elasticsearch.tls.enabled }}
              until curl -sf -u "elastic:${ELASTIC_PASSWORD}" \
                --cacert /certs/ca.crt \
                https://{{ .Values.elasticsearch.name }}:{{ .Values.elasticsearch.service.httpPort }}/_cluster/health | grep -q '"status":"green"\|"status":"yellow"'; do
              {{- else }}
              until curl -sf -u "elastic:${ELASTIC_PASSWORD}" \
                http://{{ .Values.elasticsearch.name }}:{{ .Values.elasticsearch.service.httpPort }}/_cluster/health | grep -q '"status":"green"\|"status":"yellow"'; do
              {{- end }}
                echo "Elasticsearch is not ready yet. Retrying in 10 seconds..."
                sleep 10
              done
              echo "Elasticsearch is ready!"
          {{- if .Values.elasticsearch.tls.enabled }}
          volumeMounts:
            - name: certs
              mountPath: /certs
              readOnly: true
          {{- end }}
      containers:
        - name: setup-passwords
          image: bitnami/kubectl:latest
          env:
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: elastic-password
          command:
            - sh
            - -c
            - |
              set -e

              echo "Setting up Elasticsearch user passwords..."

              {{- if .Values.elasticsearch.tls.enabled }}
              ES_URL="https://{{ .Values.elasticsearch.name }}:{{ .Values.elasticsearch.service.httpPort }}"
              CURL_OPTS="--cacert /certs/ca.crt"
              {{- else }}
              ES_URL="http://{{ .Values.elasticsearch.name }}:{{ .Values.elasticsearch.service.httpPort }}"
              CURL_OPTS=""
              {{- end }}

              # Elasticsearch 연결 확인
              until curl -sf ${CURL_OPTS} -u "elastic:${ELASTIC_PASSWORD}" \
                ${ES_URL}/_cluster/health >/dev/null 2>&1; do
                echo "Waiting for Elasticsearch..."
                sleep 5
              done

              echo "Elasticsearch is accessible"

              # kibana_system 사용자 비밀번호 설정
              echo "Resetting kibana_system password..."
              KIBANA_PASSWORD=$(kubectl exec {{ .Values.elasticsearch.name }}-0 -n {{ .Values.global.namespace }} -- \
                /usr/share/elasticsearch/bin/elasticsearch-reset-password -u kibana_system -b -s 2>&1 | tail -1)
              echo "kibana_system password: $KIBANA_PASSWORD"

              # logstash_writer 사용자가 있는지 확인하고 없으면 생성
              echo "Checking for logstash_writer user..."
              USER_EXISTS=$(curl -s ${CURL_OPTS} -u "elastic:${ELASTIC_PASSWORD}" \
                -X GET "${ES_URL}/_security/user/logstash_writer" \
                -H 'Content-Type: application/json' | grep -c "logstash_writer" || echo "0")

              if [ "$USER_EXISTS" = "0" ]; then
                echo "Creating logstash_writer user..."
                LOGSTASH_PASSWORD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)

                curl -s ${CURL_OPTS} -u "elastic:${ELASTIC_PASSWORD}" \
                  -X POST "${ES_URL}/_security/user/logstash_writer" \
                  -H 'Content-Type: application/json' \
                  -d "{
                    \"password\" : \"$LOGSTASH_PASSWORD\",
                    \"roles\" : [ \"logstash_writer\" ],
                    \"full_name\" : \"Logstash Writer\",
                    \"email\" : \"logstash@example.com\"
                  }"

                echo "logstash_writer user created"
              else
                echo "logstash_writer user already exists, resetting password..."
                LOGSTASH_PASSWORD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 20)

                curl -s ${CURL_OPTS} -u "elastic:${ELASTIC_PASSWORD}" \
                  -X PUT "${ES_URL}/_security/user/logstash_writer/_password" \
                  -H 'Content-Type: application/json' \
                  -d "{
                    \"password\" : \"$LOGSTASH_PASSWORD\"
                  }"

                echo "logstash_writer password reset"
              fi

              # logstash_writer 역할 생성 (없으면)
              echo "Creating logstash_writer role..."
              curl -s ${CURL_OPTS} -u "elastic:${ELASTIC_PASSWORD}" \
                -X POST "${ES_URL}/_security/role/logstash_writer" \
                -H 'Content-Type: application/json' \
                -d '{
                  "cluster": ["manage_index_templates", "monitor", "manage_ilm"],
                  "indices": [
                    {
                      "names": [ "logs-*", "logstash-*" ],
                      "privileges": ["write", "create", "create_index", "manage", "manage_ilm"]
                    }
                  ]
                }' || echo "Role may already exist"

              echo "Updating Kubernetes Secret with new passwords..."

              # Secret 업데이트
              kubectl patch secret elasticsearch-credentials -n {{ .Values.global.namespace }} --type='json' -p="[
                {\"op\": \"replace\", \"path\": \"/data/kibana-password\", \"value\": \"$(echo -n $KIBANA_PASSWORD | base64 -w 0)\"},
                {\"op\": \"replace\", \"path\": \"/data/logstash-writer-password\", \"value\": \"$(echo -n $LOGSTASH_PASSWORD | base64 -w 0)\"}
              ]"

              echo "Passwords updated successfully!"
              echo "Restarting Kibana and Logstash to pick up new passwords..."

              # Kibana와 Logstash 재시작
              kubectl rollout restart deployment/{{ .Values.kibana.name }} -n {{ .Values.global.namespace }}
              kubectl rollout restart deployment/{{ .Values.logstash.name }} -n {{ .Values.global.namespace }}

              echo "Setup complete!"
          {{- if .Values.elasticsearch.tls.enabled }}
          volumeMounts:
            - name: certs
              mountPath: /certs
              readOnly: true
          {{- end }}
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
      {{- if .Values.elasticsearch.tls.enabled }}
      volumes:
        - name: certs
          secret:
            secretName: {{ .Values.elasticsearch.name }}-certs
            defaultMode: 0644
      {{- end }}
      serviceAccountName: {{ .Values.elasticsearch.name }}-setup-passwords
{{- end }}
